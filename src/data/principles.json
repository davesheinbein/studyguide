[
	{
		"id": 1,
		"topic": "Functions",
		"category": "JavaScript Basics",
		"code": "// Function Declaration\nfunction add(a, b) {\n return a + b;\n}\n// Function Expression\nconst add = function(a, b) {\n return a + b;\n};\n// Arrow Function\nconst add = (a, b) => a + b;\n",
		"explanation": "This snippet demonstrates three ways to define functions in JavaScript: function declaration, function expression, and arrow function. In an interview, you might be asked to explain the differences, such as hoisting behavior and the 'this' binding in arrow functions."
	},
	{
		"id": 2,
		"topic": "APIs",
		"category": "Web APIs",
		"code": "// Fetch API\nfetch('https://api.example.com/data')\n .then(response => response.json())\n .then(data => console.log(data))\n .catch(error => console.error('Error:', error));\n",
		"explanation": "This snippet shows how to use the Fetch API to make an HTTP request. In an interview, you might be asked to explain how promises work and how to handle asynchronous operations and errors."
	},
	{
		"id": 3,
		"topic": "BigO",
		"category": "Algorithms",
		"code": "// Constant Time O(1)\nfunction getFirstElement(arr) {\n return arr[0];\n}\n// Linear Time O(n)\nfunction printAllElements(arr) {\n arr.forEach(element => console.log(element));\n}\n// Quadratic Time O(n^2)\nfunction printAllPairs(arr) {\n arr.forEach((el1, i) => {\n  arr.forEach((el2, j) => {\n   console.log(el1, el2);\n  });\n });\n}\n",
		"explanation": "This snippet demonstrates different time complexities: O(1), O(n), and O(n^2). In an interview, you might be asked to analyze the efficiency of algorithms and discuss how to optimize them."
	},
	{
		"id": 4,
		"topic": "Closures",
		"category": "JavaScript Basics",
		"code": "// Closure Example\nfunction makeCounter() {\n let count = 0;\n return function() {\n  count++;\n  return count;\n };\n}\nconst counter = makeCounter();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2\n",
		"explanation": "This snippet demonstrates a closure. In an interview, you might be asked to explain how closures work and their use cases, such as data encapsulation and creating private variables."
	},
	{
		"id": 5,
		"topic": "Promises",
		"category": "Asynchronous JavaScript",
		"code": "// Creating a Promise\nconst promise = new Promise((resolve, reject) => {\n const success = true;\n if (success) {\n  resolve('Success!');\n } else {\n  reject('Failure!');\n }\n});\n// Consuming a Promise\npromise\n .then(result => console.log(result))\n .catch(error => console.error(error));\n",
		"explanation": "This snippet shows how to create and consume a Promise. In an interview, you might be asked to discuss the advantages of promises over callbacks and how to handle asynchronous operations."
	},
	{
		"id": 6,
		"topic": "Async/Await",
		"category": "Asynchronous JavaScript",
		"code": "// Async/Await Example\nasync function fetchData() {\n try {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n } catch (error) {\n  console.error('Error:', error);\n }\n}\nfetchData();\n",
		"explanation": "This snippet demonstrates the use of async/await syntax. In an interview, you might be asked to explain how async/await improves code readability and how it works under the hood."
	},
	{
		"id": 7,
		"topic": "Event Loop",
		"category": "JavaScript Basics",
		"code": "// Event Loop Example\nconsole.log('Start');\nsetTimeout(() => {\n console.log('Timeout');\n}, 0);\nPromise.resolve().then(() => {\n console.log('Promise');\n});\nconsole.log('End');\n",
		"explanation": "This snippet illustrates the JavaScript event loop. In an interview, you might be asked to explain the order of execution for synchronous code, microtasks, and macrotasks, and how it affects asynchronous programming."
	},
	{
		"id": 8,
		"topic": "Hoisting",
		"category": "JavaScript Basics",
		"code": "// Hoisting Example\nconsole.log(hoistedVar); // undefined\nvar hoistedVar = 'I am hoisted';\n// Function hoisting\nhoistedFunction();\nfunction hoistedFunction() {\n console.log('I am hoisted');\n}\n",
		"explanation": "This snippet demonstrates hoisting in JavaScript. In an interview, you might be asked to explain how hoisting works and its implications for variable and function declarations."
	},
	{
		"id": 9,
		"topic": "This Keyword",
		"category": "JavaScript Basics",
		"code": "// 'this' in Global Context\nconsole.log(this); // Window object (in browsers)\n// 'this' in Object Method\nconst obj = {\n name: 'Alice',\n greet() {\n  console.log(this.name);\n }\n};\nobj.greet(); // Alice\n// 'this' in a Function\nfunction showThis() {\n console.log(this);\n}\nshowThis(); // undefined (in strict mode) or Window object (in non-strict mode)\n",
		"explanation": "This snippet shows different contexts of the 'this' keyword. In an interview, you might be asked to explain how 'this' is determined and how it behaves in different scenarios."
	},
	{
		"id": 10,
		"topic": "Array Methods",
		"category": "JavaScript Basics",
		"code": "// forEach\n[1, 2, 3].forEach(num => console.log(num));\n// map\nconst squares = [1, 2, 3].map(num => num * num);\n// filter\nconst evens = [1, 2, 3, 4].filter(num => num % 2 === 0);\n// reduce\nconst sum = [1, 2, 3].reduce((acc, num) => acc + num, 0);\n",
		"explanation": "This snippet demonstrates various array methods. In an interview, you might be asked to explain the use cases for each method and how they provide a functional approach to array manipulation."
	},
	{
		"id": 11,
		"topic": "Destructuring",
		"category": "JavaScript Basics",
		"code": "// Array Destructuring\nconst [a, b] = [1, 2];\n// Object Destructuring\nconst {name, age} = {name: 'Alice', age: 25};\n",
		"explanation": "This snippet shows how to use destructuring assignment. In an interview, you might be asked to explain how destructuring simplifies working with arrays and objects."
	},
	{
		"id": 12,
		"topic": "Spread Operator",
		"category": "JavaScript Basics",
		"code": "// Spread in Arrays\nconst arr1 = [1, 2];\nconst arr2 = [...arr1, 3, 4];\n// Spread in Objects\nconst obj1 = {a: 1, b: 2};\nconst obj2 = {...obj1, c: 3};\n",
		"explanation": "This snippet demonstrates the use of the spread operator. In an interview, you might be asked to explain how the spread operator helps in copying and merging arrays and objects."
	},
	{
		"id": 13,
		"topic": "Rest Parameters",
		"category": "JavaScript Basics",
		"code": "// Rest Parameters\nfunction sum(...numbers) {\n return numbers.reduce((acc, num) => acc + num, 0);\n}\nconsole.log(sum(1, 2, 3)); // 6\n",
		"explanation": "This snippet shows how to use rest parameters. In an interview, you might be asked to explain how rest parameters make it easier to handle functions with an indefinite number of arguments."
	},
	{
		"id": 14,
		"topic": "Template Literals",
		"category": "JavaScript Basics",
		"code": "// Template Literals\nconst name = 'Alice';\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting); // Hello, Alice!\n",
		"explanation": "This snippet demonstrates the use of template literals. In an interview, you might be asked to explain how template literals improve string interpolation and multi-line strings."
	},
	{
		"id": 15,
		"topic": "Default Parameters",
		"category": "JavaScript Basics",
		"code": "// Default Parameters\nfunction greet(name = 'Guest') {\n console.log(`Hello, ${name}!`);\n}\ngreet(); // Hello, Guest!\ngreet('Alice'); // Hello, Alice!\n",
		"explanation": "This snippet shows how to use default parameters. In an interview, you might be asked to explain how default parameters provide default values and make functions more flexible."
	},
	{
		"id": 16,
		"topic": "Classes",
		"category": "JavaScript Basics",
		"code": "// Class Declaration\nclass Person {\n constructor(name, age) {\n  this.name = name;\n  this.age = age;\n }\n greet() {\n  console.log(`Hello, my name is ${this.name}`);\n }\n}\nconst alice = new Person('Alice', 25);\nalice.greet(); // Hello, my name is Alice\n",
		"explanation": "This snippet demonstrates how to define and use classes. In an interview, you might be asked to explain the benefits of using classes for a more structured and object-oriented approach."
	},
	{
		"id": 17,
		"topic": "Modules",
		"category": "JavaScript Basics",
		"code": "// Exporting a Module\nexport const add = (a, b) => a + b;\n// Importing a Module\nimport { add } from './math.js';\nconsole.log(add(2, 3)); // 5\n",
		"explanation": "This snippet shows how to export and import modules. In an interview, you might be asked to explain how modules help in organizing code and managing dependencies."
	},
	{
		"id": 18,
		"topic": "Set",
		"category": "JavaScript Basics",
		"code": "// Set Example\nconst set = new Set([1, 2, 3, 3]);\nset.add(4);\nset.delete(2);\nconsole.log(set.has(1)); // true\nconsole.log(set.size); // 3\n",
		"explanation": "This snippet demonstrates the use of the Set object. In an interview, you might be asked to explain how Sets manage collections of unique items and their operations."
	},
	{
		"id": 19,
		"topic": "Map",
		"category": "JavaScript Basics",
		"code": "// Map Example\nconst map = new Map();\nmap.set('a', 1);\nmap.set('b', 2);\nconsole.log(map.get('a')); // 1\nconsole.log(map.has('b')); // true\nmap.delete('b');\nconsole.log(map.size); // 1\n",
		"explanation": "This snippet shows how to use the Map object. In an interview, you might be asked to explain how Maps efficiently manage key-value pairs compared to plain objects."
	},
	{
		"id": 20,
		"topic": "Callbacks",
		"category": "Asynchronous JavaScript",
		"code": "// Callback Example\nfunction fetchData(callback) {\n setTimeout(() => {\n  callback('Data received');\n }, 1000);\n}\nfetchData(data => console.log(data)); // Data received\n",
		"explanation": "This snippet demonstrates the use of callbacks. In an interview, you might be asked to explain how callbacks handle asynchronous operations and their drawbacks compared to promises."
	},
	{
		"id": 21,
		"topic": "Error Handling",
		"category": "JavaScript Basics",
		"code": "// Try/Catch Example\ntry {\n throw new Error('Something went wrong');\n} catch (error) {\n console.error(error.message); // Something went wrong\n}\n",
		"explanation": "This snippet shows how to use try/catch blocks. In an interview, you might be asked to explain how try/catch blocks handle exceptions and improve error management."
	},
	{
		"id": 22,
		"topic": "Strict Mode",
		"category": "JavaScript Basics",
		"code": "// Strict Mode Example\n'use strict';\nfunction myFunction() {\n x = 3.14; // This will cause an error because x is not declared\n}\nmyFunction();\n",
		"explanation": "This snippet demonstrates the use of strict mode. In an interview, you might be asked to explain how strict mode enforces stricter parsing and error handling, improving code quality."
	},
	{
		"id": 23,
		"topic": "Symbol",
		"category": "JavaScript Basics",
		"code": "// Symbol Example\nconst sym1 = Symbol('description');\nconst sym2 = Symbol('description');\nconsole.log(sym1 === sym2); // false\n",
		"explanation": "This snippet shows how to use the Symbol type. In an interview, you might be asked to explain how Symbols create unique and immutable values, avoiding name collisions."
	},
	{
		"id": 24,
		"topic": "Iterators",
		"category": "JavaScript Basics",
		"code": "// Iterator Example\nconst iterable = [1, 2, 3];\nconst iterator = iterable[Symbol.iterator]();\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n",
		"explanation": "This snippet demonstrates how to use iterators. In an interview, you might be asked to explain how iterators provide a standard way to traverse data structures."
	},
	{
		"id": 25,
		"topic": "Generators",
		"category": "JavaScript Basics",
		"code": "// Generator Example\nfunction* generator() {\n yield 1;\n yield 2;\n yield 3;\n}\nconst gen = generator();\nconsole.log(gen.next().value); // 1\nconsole.log(gen.next().value); // 2\nconsole.log(gen.next().value); // 3\n",
		"explanation": "This snippet shows how to use generator functions. In an interview, you might be asked to explain how generators create iterators and manage control flow with the yield keyword."
	},
	{
		"id": 26,
		"topic": "Proxy",
		"category": "JavaScript Basics",
		"code": "// Proxy Example\nconst target = {};\nconst handler = {\n get: function(obj, prop) {\n  return prop in obj ? obj[prop] : 'default';\n }\n};\nconst proxy = new Proxy(target, handler);\nproxy.name = 'Alice';\nconsole.log(proxy.name); // Alice\nconsole.log(proxy.age); // default\n",
		"explanation": "This snippet demonstrates how to use the Proxy object. In an interview, you might be asked to explain how Proxies define custom behavior for fundamental operations on objects."
	},
	{
		"id": 27,
		"topic": "Reflect",
		"category": "JavaScript Basics",
		"code": "// Reflect Example\nconst obj = {a: 1};\nReflect.set(obj, 'b', 2);\nconsole.log(obj.b); // 2\n",
		"explanation": "This snippet shows how to use the Reflect object. In an interview, you might be asked to explain how Reflect performs operations on objects, similar to Proxies."
	},
	{
		"id": 28,
		"topic": "WeakMap",
		"category": "JavaScript Basics",
		"code": "// WeakMap Example\nconst weakMap = new WeakMap();\nconst obj = {};\nweakMap.set(obj, 'value');\nconsole.log(weakMap.get(obj)); // value\n",
		"explanation": "This snippet demonstrates the use of the WeakMap object. In an interview, you might be asked to explain how WeakMaps store key-value pairs with keys that can be garbage collected."
	},
	{
		"id": 29,
		"topic": "WeakSet",
		"category": "JavaScript Basics",
		"code": "// WeakSet Example\nconst weakSet = new WeakSet();\nconst obj = {};\nweakSet.add(obj);\nconsole.log(weakSet.has(obj)); // true\n",
		"explanation": "This snippet shows how to use the WeakSet object. In an interview, you might be asked to explain how WeakSets store collections of objects that can be garbage collected."
	},
	{
		"id": 30,
		"topic": "Fetch Calls",
		"category": "Web APIs",
		"code": "// Using Fetch API\nfetch('https://api.example.com/data')\n .then(response => response.json())\n .then(data => console.log(data))\n .catch(error => console.error('Error:', error));\n\n// Using Async/Await\nasync function fetchData() {\n try {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n } catch (error) {\n  console.error('Error:', error);\n }\n}\nfetchData();\n\n// Using Axios\naxios.get('https://api.example.com/data')\n .then(response => console.log(response.data))\n .catch(error => console.error('Error:', error));\n",
		"explanation": "This snippet demonstrates three ways to make fetch calls. In an interview, you might be asked to explain the differences between using Fetch API with promises, async/await syntax, and the Axios library."
	}
]
