{
	"id": 52,
	"topic": "Valid Parentheses",
	"code": "// Check if the parentheses are valid\nconst isValid = function(s) {\n     console.log(\"Initial Stack:\", s);\n    // Stack to keep track of opening brackets\n    const stack = [];\n    // Map to match closing brackets with their respective opening brackets\n    const matchingBrackets = {\n        ')': '(',\n        '}': '{',\n        ']': '['\n    };\n    \n    for (let char of s) {\n        if (char === '(' || char === '{' || char === '[') {\n            // Push opening brackets onto the stack\n            stack.push(char);\n            console.log(`Pushed ${char} onto the stack:`, stack);\n        } else {\n            // Check if the stack is empty or if the top of the stack doesn't match\n            if (stack.length === 0) {\n                console.log(`Stack is empty when encountering ${char}`);\n                return false;\n            }\n            if (stack[stack.length - 1] !== matchingBrackets[char]) {\n                console.log(`Mismatch found: expected ${matchingBrackets[char]}, found ${char}`);\n                return false;\n            }\n            // Pop the matched opening bracket\n            console.log(`Popped ${stack[stack.length - 1]} for ${char}`);\n            stack.pop();\n        }\n    }\n    \n    // Final state of the stack\n    console.log(\"Final stack state:\", stack);\n    // If the stack is empty, all brackets were matched correctly\n    return stack.length === 0;\n};\n\n// Example usage\nconsole.log(\"true?: \", isValid(\"()[]{}\"));  // Expected output: true\nconsole.log(\"false?: \", isValid(\"(]\"));      // Expected output: false\nconsole.log(\"true?: \", isValid(\"([{}])\"));  // Expected output: true\nconsole.log(\"false?: \", isValid(\"((()))]\")); // Expected output: false\n",
	"explanation": "// Explanation\n// Initial Logging:\n\n// console.log(\"Initial Stack:\", s); logs the input string to give context about the input before processing.\n// Setting Up the Stack:\n\n// const stack = []; initializes an empty stack to keep track of opening brackets. This stack helps ensure that each opening bracket has a corresponding and correctly ordered closing bracket.\n// Matching Map for Closing Brackets:\n\n// const matchingBrackets = { ')': '(', '}': '{', ']': '[' }; defines a dictionary mapping each closing bracket to its respective opening bracket. This will make it easy to check if each closing bracket has a corresponding opening bracket in the correct order.\n// Iterating through the Characters in the String:\n\n// The function iterates through each character in the input string s with for (let char of s).\n\n// If the character is an opening bracket ((, {, or [):\n\n// stack.push(char); pushes the character onto the stack.\n// console.log(...) logs that the character has been pushed, displaying the current stack’s state.\n// If the character is a closing bracket (), }, or ]):\n\n// Empty Stack Check:\n// if (stack.length === 0) checks if the stack is empty. If true, it logs this and returns false because there’s no opening bracket for this closing bracket, making the string invalid.\n// Mismatched Brackets Check:\n// if (stack[stack.length - 1] !== matchingBrackets[char]) compares the last pushed opening bracket (top of the stack) with the expected matching bracket from matchingBrackets. If they don’t match, it logs this mismatch and returns false.\n// Matching Brackets:\n// If the closing bracket matches the top opening bracket, stack.pop() removes this opening bracket from the stack, effectively “matching” this pair of brackets.\n// console.log(...) logs this successful pop, showing which bracket was removed from the stack for the matched closing bracket.\n// Final Stack Check:\n\n// After the loop, console.log(\"Final stack state:\", stack); logs the state of the stack. For the string to be valid, the stack should be empty; this would mean all opening brackets were properly closed and matched.\n// return stack.length === 0; returns true if the stack is empty (valid string) and false otherwise (invalid string).",
	"category": "Stack"
}