{
	"id": 12,
	"topic": "Insert Delete GetRandom O(1)",
	"code": "// Class to implement a randomized set\nvar RandomizedSet = function() {\n    this.map = new Map(); // Maps each value to its index in the 'list' array for O(1) lookups\n    this.list = [];       // Stores values for efficient random access\n};\n\n/** \n * Inserts a value into the set.\n * @param {number} val - The value to insert.\n * @return {boolean} - Returns true if the value was inserted, false if it already exists.\n */\n\nRandomizedSet.prototype.insert = function(val) {\n    // Check if the value already exists in the map\n    if (this.map.has(val)) return false;\n\n    // Add value to the list\n    this.list.push(val);\n\n    // Store the index of the newly added value in the map\n    this.map.set(val, this.list.length - 1);\n\n    return true; // Successfully inserted\n};\n\n/** \n * Removes a value from the set.\n * @param {number} val - The value to remove.\n * @return {boolean} - Returns true if the value was removed, false if it doesn't exist.\n */\n\nRandomizedSet.prototype.remove = function(val) {\n    // Check if the value exists in the map\n    if (!this.map.has(val)) return false;\n\n    // Retrieve the index of the value to be removed\n    const index = this.map.get(val);\n\n    // Get the last value in the list\n    const lastValue = this.list[this.list.length - 1];\n\n    // Replace the value at the index with the last value (swap)\n    this.list[index] = lastValue;\n\n    // Update the map to reflect the new index of the last value\n    this.map.set(lastValue, index);\n\n    // Remove the last element from the list (constant-time removal)\n    this.list.pop();\n\n    // Delete the value from the map\n    this.map.delete(val);\n\n    return true; // Successfully removed\n};\n\n/**\n * Returns a random value from the set.\n * @return {number} - A randomly selected value.\n */\n\nRandomizedSet.prototype.getRandom = function() {\n    // Generate a random index between 0 and list.length - 1\n    const randomIndex = Math.floor(Math.random() * this.list.length);\n\n    // Return the value at the generated index\n    return this.list[randomIndex];\n};\n\n/** \n * Usage Example:\n * var obj = new RandomizedSet();\n * var param_1 = obj.insert(val);\n * var param_2 = obj.remove(val);\n * var param_3 = obj.getRandom();\n */\n\n// Testing the functionality\nvar randomizedSet = new RandomizedSet();\nconsole.log(randomizedSet.insert(1));    // true: Adds 1 to the set\nconsole.log(randomizedSet.remove(2));    // false: 2 is not in the set\nconsole.log(randomizedSet.insert(2));    // true: Adds 2 to the set\nconsole.log(randomizedSet.getRandom());  // 1 or 2: Randomly selects one of the values\nconsole.log(randomizedSet.remove(1));    // true: Removes 1 from the set\nconsole.log(randomizedSet.insert(2));    // false: 2 is already in the set\nconsole.log(randomizedSet.getRandom());  // 2: 2 is the only value in the set\n",
	"explanation": "The `RandomizedSet` class is a data structure that supports the following operations in average O(1) time:<br/>1. `insert(val)`: Inserts a value into the set if it is not already present. Returns `true` if the value was added, and `false` if it already exists.<br/>2. `remove(val)`: Removes a value from the set if it exists. Returns `true` if the value was removed, and `false` if it does not exist.<br/>3. `getRandom()`: Returns a random value from the set. Each value has an equal probability of being selected.<br/><br/>Implementation Details:<br/><br/>1. Constructor (`RandomizedSet`):<br/>   - `this.map`: A `Map` object that maps values to their indices in the `list` array. This allows for constant-time lookup of values.<br/>   - `this.list`: An array that stores all the values. This array supports fast access for random selection.<br/><br/>2. Insert Operation (`insert(val)`):<br/>   - Checks if `val` is already in the `map` using `this.map.has(val)`. If it exists, return `false`.<br/>   - If not, appends `val` to `this.list` and updates the `map` with the value's index (`this.list.length - 1`).<br/>   - Returns `true` to indicate the value was successfully added.<br/><br/>3. Remove Operation (`remove(val)`):<br/>   - Checks if `val` exists in `this.map`. If not, return `false`.<br/>   - Retrieves the index of `val` from the `map`.<br/>   - Swaps the value at this index with the last value in `this.list` to maintain efficient removal.<br/>     - Updates the `map` to reflect the new index of the last value.<br/>   - Removes the last element of the `list` using `pop()` and deletes the entry for `val` in `this.map`.<br/>   - Returns `true` to indicate the value was successfully removed.<br/><br/>4. Get Random Operation (`getRandom()`):<br/>   - Generates a random index using `Math.random()` and the length of the `list`.<br/>   - Returns the value at the random index in `this.list`.<br/><br/>Example Walkthrough:<br/><br/>- `randomizedSet.insert(1)`:<br/>  - Adds `1` to the set. Updates `map` to `{1: 0}` and `list` to `[1]`.<br/>  - Returns `true`.<br/><br/>- `randomizedSet.remove(2)`:<br/>  - Fails because `2` is not in the set.<br/>  - Returns `false`.<br/><br/>- `randomizedSet.insert(2)`:<br/>  - Adds `2` to the set. Updates `map` to `{1: 0, 2: 1}` and `list` to `[1, 2]`.<br/>  - Returns `true`.<br/><br/>- `randomizedSet.getRandom()`:<br/>  - Randomly returns either `1` or `2`, as both have equal probability.<br/><br/>- `randomizedSet.remove(1)`:<br/>  - Removes `1`. Swaps `1` with the last value (`2`) in the `list`.<br/>  - Updates `map` to `{2: 0}` and `list` to `[2]`.<br/>  - Returns `true`.<br/><br/>- `randomizedSet.insert(2)`:<br/>  - Fails because `2` is already in the set.<br/>  - Returns `false`.<br/><br/>- `randomizedSet.getRandom()`:<br/>  - Returns `2`, as it is the only value in the set.<br/><br/>Time Complexity:<br/>1. `insert(val)`: O(1), as it performs constant-time operations on the `map` and `list`.<br/>2. `remove(val)`: O(1), as it swaps and pops elements in the `list` and updates the `map`.<br/>3. `getRandom()`: O(1), as it accesses a random index in the `list`.<br/><br/>Space Complexity:<br/>- The space complexity is O(n), where `n` is the number of elements in the set. The `list` and `map` both store references to the elements.",
	"category": "Array / String"
}
