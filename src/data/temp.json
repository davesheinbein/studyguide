{
	"id": 86,
	"topic": "Minimum Absolute Difference in BST",
	"code": "// Find the minimum absolute difference in a BST\nvar getMinimumDifference = function (root) {\n let prev = null; // Tracks the previous value in the in-order traversal\n let minDiff = Infinity; // Initialize the minimum difference to a very large number\n\n // Helper function for in-order traversal\n const inOrderTraversal = (node) => {\n if (!node) return;\n\n // Traverse the left subtree\n inOrderTraversal(node.left);\n\n // Process the current node\n if (prev !== null) {\n // Update the minimum difference\n minDiff = Math.min(minDiff, Math.abs(node.val - prev));\n }\n // Update the previous value to the current node's value\n prev = node.val;\n\n // Traverse the right subtree\n inOrderTraversal(node.right);\n };\n\n // Perform in-order traversal starting from the root\n inOrderTraversal(root);\n\n return minDiff;\n};\n",
	"explanation": "Explanation:\n\n1. In-order Traversal:\nThe recursive function `inOrderTraversal` processes nodes in ascending order for a BST.\n\n2. `prev` Variable:\nKeeps track of the previously visited node's value during traversal.\n\n3. Minimum Difference Calculation:\nAt each node, the absolute difference between the current node's value and `prev` is calculated.\nThe `minDiff` is updated if the new difference is smaller.\n\n4. Return Value:\nAfter the traversal, `minDiff` contains the smallest absolute difference between any two nodes.\n\nComplexity Analysis:\n- Time Complexity: O(n), where `n` is the number of nodes. Each node is visited once.\n- Space Complexity: O(h), where `h` is the height of the BST. This accounts for the recursion stack.",
	"category": "Binary Search Tree"
}
