{
	"id": 101,
	"topic": "Letter Combinations of a Phone Number",
	"code": "// Find all letter combinations of a phone number\nvar letterCombinations = function(digits) {\n // Map of digit to corresponding letters, similar to a phone keypad\n const digitToLetters = {\n \"2\": \"abc\",\n \"3\": \"def\",\n \"4\": \"ghi\",\n \"5\": \"jkl\",\n \"6\": \"mno\",\n \"7\": \"pqrs\",\n \"8\": \"tuv\",\n \"9\": \"wxyz\"\n };\n \n // Result array to store all possible letter combinations\n const result = [];\n \n // Base case: If the input digits are empty, return an empty array\n if (digits.length === 0) {\n return result;\n }\n \n const backtrack = (index, currentCombination) => {\n // If the current combination length equals the number of digits, add it to the result\n if (index === digits.length) {\n result.push(currentCombination); // Valid combination completed\n return;\n }\n \n // Get the letters corresponding to the current digit\n const letters = digitToLetters[digits[index]];\n \n // Loop through each letter for the current digit\n for (const letter of letters) {\n // Add the letter to the current combination and move to the next digit\n backtrack(index + 1, currentCombination + letter);\n }\n };\n \n // Start the backtracking process with index 0 and an empty combination\n backtrack(0, \"\");\n \n // Return the final list of all combinations\n return result;\n};\n\n// Example usage:\nconst inputDigits = \"23\";\nconsole.log(letterCombinations(inputDigits)); \n// Output: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]\n",
	"explanation": "1. `digitToLetters`: Maps digits (2-9) to their corresponding letters. This allows quick lookup for any digit.<br/>2. `result`: Stores all valid letter combinations.<br/>3. Base Case: If the `digits` string is empty, no combinations can be formed, so return an empty array.<br/>4. `backtrack` function:<br/>   - Tracks progress using `index` (current digit position) and `currentCombination` (letters formed so far).<br/>   - Recursion explores all possible paths:<br/>     a. Add a letter to the current combination.<br/>     b. Move to the next digit using `index + 1`.<br/>     c. Stop recursion and add the combination to `result` once all digits are processed.<br/>5. Backtracking starts at index 0 with an empty string.<br/>6. Time Complexity: O(3^n * 4^m), where n is digits mapping to 3 letters (e.g., 2-6, 8), and m maps to 4 letters (e.g., 7, 9).<br/>7. Space Complexity: O(n), due to the recursion stack depth equal to the number of digits.",
	"category": "Backtracking"
}
