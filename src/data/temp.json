{
	"id": 42,
	"topic": "Valid Anagram",
	"code": "// Check if two strings are anagrams\nvar isAnagram = function(firstString, secondString) {\n    // Step 1: Check if the strings have the same length\n    // - If the lengths of the two strings are not equal, they cannot be anagrams,\n    //   since anagrams must use the exact same characters in the same quantities.\n    if (firstString.length !== secondString.length) {\n        return false; // Immediately return false if the lengths differ.\n    }\n\n    // Step 2: Create a frequency map to count characters in the first string\n    // - The map will store each character as a key and its frequency as the value.\n    // - For example, for the string \"anagram\", the map would look like: \n    //   { 'a': 3, 'n': 1, 'g': 1, 'r': 1, 'm': 1 }.\n    const charFrequency = new Map();\n\n    // Step 3: Populate the frequency map with characters from firstString\n    for (const char of firstString) {\n        // If the character is already in the map, increment its count by 1.\n        // If it's not in the map, add it with an initial count of 1.\n        charFrequency.set(char, (charFrequency.get(char) || 0) + 1);\n    }\n\n    // Step 4: Verify characters in secondString against the frequency map\n    for (const char of secondString) {\n        // If a character in secondString does not exist in the map,\n        // it means the character is not present in firstString or has already been used up.\n        if (!charFrequency.has(char)) {\n            return false; // Return false because the strings are not anagrams.\n        }\n\n        // Decrement the frequency of the character in the map.\n        charFrequency.set(char, charFrequency.get(char) - 1);\n\n        // If the frequency becomes zero, remove the character from the map.\n        // This helps optimize space usage and ensures we only track characters with non-zero counts.\n        if (charFrequency.get(char) === 0) {\n            charFrequency.delete(char);\n        }\n    }\n\n    // Step 5: Check the map size\n    // - After processing both strings, if the map is empty, it means all characters matched perfectly,\n    //   and their frequencies were balanced. The strings are anagrams.\n    return charFrequency.size === 0;\n};\n\n// Examples\n// Example 1: \"anagram\" and \"nagaram\" should return true\nconsole.log(isAnagram(\"anagram\", \"nagaram\")); // Output: true\n\n// Example 2: \"rat\" and \"car\" should return false\nconsole.log(isAnagram(\"rat\", \"car\")); // Output: false\n",
	"explanation": "- Two strings are anagrams if they contain the same characters with the same frequencies, regardless of order.<br/>- The function implements the following steps:<br/>  1. Check if the lengths of the two strings are equal. If not, return false immediately.<br/>  2. Use a frequency map to count the occurrences of each character in the first string.<br/>  3. Traverse the second string and verify if each character exists in the map with a sufficient count:<br/>     - Decrement the count for each matching character.<br/>     - Remove a character from the map if its count reaches zero.<br/>  4. After processing both strings, check if the map is empty. If it is, the strings are anagrams.<br/><br/>Time Complexity:<br/>- O(n), where `n` is the length of the strings. Each character in both strings is processed once.<br/><br/>Space Complexity:<br/>- O(1), because the map size is limited to 26 entries (one for each lowercase English letter).",
	"category": "Hashmap"
}
