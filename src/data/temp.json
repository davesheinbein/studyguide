{
	"id": 82,
	"topic": "Binary Tree Right Side View",
	"code": "// Find the right side view of a binary tree\nvar rightSideView = function(root) {\n // Return empty array if the tree is empty\n if (!root) return [];\n \n // Initialize queue for BFS and result array for the right-side view\n let queue = [root];\n let result = [];\n\n // Perform level-order traversal using BFS\n while (queue.length > 0) {\n let levelSize = queue.length; // Number of nodes at the current level\n \n for (let i = 0; i < levelSize; i++) {\n let currentNode = queue.shift(); // Dequeue the front node\n \n // If it's the last node in this level, add its value to the result\n if (i === levelSize - 1) {\n result.push(currentNode.val);\n }\n \n // Enqueue left and right children (if they exist)\n if (currentNode.left) queue.push(currentNode.left);\n if (currentNode.right) queue.push(currentNode.right);\n }\n }\n\n return result;\n};\n",
	"explanation": "Explanation:\n 1. Edge Case:\n    - If the root is null, return an empty array [].\n \n 2. BFS Traversal:\n    - Use a queue to perform a level-order traversal.\n    - For each level, iterate through all nodes.\n    - Keep track of the last node's value at each level and add it to the result array.\n \n 3. Enqueue Children:\n    - After processing a node, enqueue its left and right children (if they exist)\n      for processing in the next level.",
	"category": "Binary Tree BFS"
}