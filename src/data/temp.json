{
	"id": 7,
	"topic": "Best Time to Buy and Sell Stock",
	"code": "// Find the maximum profit\nvar maxProfit = function(prices) {\n let minPrice = Infinity; // Initialize the minimum price as Infinity. This will be used to find the lowest price seen so far.\n let maxProfit = 0; // Initialize the maximum profit as 0. This will store the highest profit we can achieve.\n\n // Iterate through each price in the array\n for (let price of prices) {\n if (price < minPrice) {\n minPrice = price; // If the current price is lower than the minimum price seen so far, update minPrice.\n } else {\n // If the current price is not lower than minPrice, calculate the potential profit\n // by subtracting minPrice from the current price.\n maxProfit = Math.max(maxProfit, price - minPrice);\n // Update maxProfit only if the calculated profit is greater than the current maxProfit.\n }\n }\n\n return maxProfit; // After iterating through the array, return the maximum profit found.\n};\n\nlet prices1 = [7, 1, 5, 3, 6, 4];\nconsole.log(maxProfit(prices1)); // Output: 5\n// Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5.\n\nlet prices2 = [7, 6, 4, 3, 1];\nconsole.log(maxProfit(prices2)); // Output: 0\n// Explanation: No transactions are possible since prices keep decreasing. Profit = 0.\n",
	"explanation": "Explanation:<br/>1. We iterate through the `prices` array to simulate buying and selling the stock.<br/>2. `minPrice` keeps track of the lowest price seen so far, ensuring that we always \"buy\" at the lowest possible price.<br/>3. For each price in the array:<br/>   - If it is lower than `minPrice`, update `minPrice` (simulate finding a better day to buy).<br/>   - Otherwise, calculate the profit if we \"sell\" on the current day. Compare this profit with the current `maxProfit` and update it if the new profit is higher.<br/>4. If no profit is possible (prices keep decreasing), `maxProfit` remains 0.<br/>5. The algorithm ensures we only traverse the array once, making it efficient with O(n) time complexity.",
	"category": "Array / String"
}
