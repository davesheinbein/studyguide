{
	"id": 24,
	"topic": "Text Justification",
	"code": "// Justify text\nvar fullJustify = function (words, maxWidth) {\n const result = [];\n let line = [];\n let lineLength = 0;\n for (let word of words) {\n if (lineLength + line.length + word.length > maxWidth) {\n for (let i = 0; i < maxWidth - lineLength; i++) {\n line[i % (line.length - 1 || 1)] += ' ';\n }\n result.push(line.join(''));\n line = [];\n lineLength = 0;\n }\n line.push(word);\n lineLength += word.length;\n }\n result.push(line.join(' ') + ' '.repeat(maxWidth - lineLength - (line.length - 1)));\n return result;\n};\n\n// Examples:\nconsole.log(fullJustify(['This', 'is', 'an', 'example', 'of', 'text', 'justification.'], 16));\n// Output:\n// [\n//   \"This    is    an\",\n//   \"example  of text\",\n//   \"justification.  \"\n// ]\n\nconsole.log(fullJustify(['What', 'must', 'be', 'acknowledgment', 'shall', 'be'], 16));\n// Output:\n// [\n//   \"What   must   be\",\n//   \"acknowledgment  \",\n//   \"shall be        \"\n// ]\n\nconsole.log(fullJustify(['Science', 'is', 'what', 'we', 'understand', 'well', 'enough', 'to', 'explain', 'to', 'a', 'computer.', 'Art', 'is', 'everything', 'else', 'we', 'do'], 20));\n// Output:\n// [\n//   \"Science  is  what we\",\n//   \"understand      well\",\n//   \"enough to explain to\",\n//   \"a  computer.  Art is\",\n//   \"everything  else  we\",\n//   \"do                  \"\n// ]\n",
	"explanation": "1. Line Construction:\n   - Words are added to a line until adding another word would exceed `maxWidth`.\n   - `lineLength` tracks the total number of characters in the current line, excluding spaces.\n\n2. Space Distribution:\n   - For fully justified lines:\n     - Calculate the total extra spaces needed: `maxWidth - lineLength`.\n     - Distribute these spaces evenly between words:\n       - Use the `%` operator to cycle through gaps when distributing unevenly.\n     - For lines with only one word, all extra spaces are added to the end.\n\n3. Last Line:\n   - The last line is left-justified:\n     - Words are joined with a single space.\n     - Remaining spaces are added to the end to match `maxWidth`.\n\n4. Output:\n   - Once all words are processed, the `result` contains all justified lines.\n\nComplexity:\n\n- Time Complexity: O(n), where n is the total number of characters in `words`. Each word is processed once.\n- Space Complexity: O(1) additional space, excluding the output array.",
	"category": "Array / String"
}
