{
	"id": 28,
	"topic": "Container With Most Water",
	"code": "// Find the container with the most water\nvar maxArea = function (height) {\n let left = 0; // Initialize the left pointer\n let right = height.length - 1; // Initialize the right pointer\n let maxArea = 0; // Variable to store the maximum area found\n while (left < right) {\n const currentHeight = Math.min(height[left], height[right]);\n const currentWidth = right - left;\n const currentArea = currentHeight * currentWidth;\n maxArea = Math.max(maxArea, currentArea);\n if (height[left] < height[right]) {\n left++;\n } else {\n right--;\n }\n }\n return maxArea;\n};\n\n// Examples:\nconsole.log(maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]));\n// Output: 49\n\nconsole.log(maxArea([1, 1]));\n// Output: 1\n\nconsole.log(maxArea([4, 3, 2, 1, 4]));\n// Output: 16\n\nconsole.log(maxArea([1, 2, 1]));\n// Output: 2\n",
	"explanation": "1. Two-pointer Approach:\n   - Start with two pointers, one at the beginning (`left`) and one at the end (`right`) of the array.\n   - Calculate the area between the two lines as:\n     \\[\n     \\text{Area} = \\min(\\text{height}[left], \\text{height}[right]) \\times (\\text{right} - \\text{left})\n     \\]\n\n2. Move the Pointer:\n   - To maximize the area, the shorter line is the limiting factor.\n   - Move the pointer pointing to the shorter line inward, as it might lead to a taller line and potentially a larger area.\n\n3. Update maxArea:\n   - Keep track of the largest area found so far.\n\n4. Stop Condition:\n   - The loop stops when the two pointers meet.\n\nComplexity:\n- Time Complexity: \\(O(n)\\), where \\(n\\) is the length of the `height` array. Each element is processed at most once.\n- Space Complexity: \\(O(1)\\), as only a few variables are used.\n\nExample Walkthrough:\n\nExample 1:\nInput: `height = [1, 8, 6, 2, 5, 4, 8, 3, 7]`\n- Initial: `left = 0`, `right = 8`\n- Iterations:\n  - Calculate area between heights `1` and `7`: \\( \\min(1, 7) \\times 8 = 8 \\).\n  - Move `left` to `1`, as `height[left] < height[right]`.\n  - Calculate area between `8` and `7`: \\( \\min(8, 7) \\times 7 = 49 \\).\n  - Update `maxArea` to `49`.\n  - Continue shrinking the window.\n- Output: `49`\n\nExample 2:\nInput: `height = [1, 1]`\n- Initial: `left = 0`, `right = 1`\n- Calculate area: \\( \\min(1, 1) \\times 1 = 1 \\).\n- Output: `1`",
	"category": "Two Pointers"
}
