{
	"id": 41,
	"topic": "Word Pattern",
	"code": "// Check if a pattern matches a string\nfunction wordPattern(pattern, s) {\n // Split the string s into an array of words.\n // This creates an array where each element is a word from the input string.\n const words = s.split(' ');\n\n // If the number of elements in the pattern does not match the number of words, return false.\n // This is a quick check to ensure that the one-to-one mapping can exist.\n if (pattern.length !== words.length) {\n // If lengths are different, the pattern cannot match the words.\n return false; \n }\n\n // Initialize two maps to store the character-to-word and word-to-character correspondences.\n // These maps will help track what each character in the pattern maps to and vice versa.\n const charToWordMap = new Map();\n const wordToCharMap = new Map();\n\n // Iterate over the pattern.\n // This loop goes through each character in the pattern and its corresponding word in the words array.\n for (let i = 0; i < pattern.length; ++i) {\n const char = pattern[i]; // Current character from the pattern.\n const word = words[i]; // Current word from the string.\n\n // Check if the current character is already associated with a different word.\n // If the character is already in the charToWordMap and it maps to a word \n // different from the current one, it indicates a conflict in mapping and \n // thus the pattern cannot match.\n if (charToWordMap.has(char)) {\n if (charToWordMap.get(char) !== word) {\n return false; // Mismatch found, return false.\n }\n }\n // Check if the current word is already associated with a different character.\n // Similar to the previous check, if the word is already mapped to a character different from the current one,\n // this also indicates a conflict.\n if (wordToCharMap.has(word)) {\n if (wordToCharMap.get(word) !== char) {\n return false; // Mismatch found, return false.\n }\n }\n\n // Add the current character-to-word and word-to-character association to the maps.\n // If no conflicts were found, we can safely set the mapping for both the character and the word.\n charToWordMap.set(char, word);\n wordToCharMap.set(word, char);\n }\n\n // If no mismatch was found, return true.\n // This means all characters and words have been successfully mapped without any conflicts.\n return true;\n}\n\n// Example usage\nconsole.log(wordPattern(\"abba\", \"dog cat cat dog\")); // Output: true\nconsole.log(wordPattern(\"abba\", \"dog cat cat fish\")); // Output: false\nconsole.log(wordPattern(\"aaaa\", \"dog cat cat dog\")); // Output: false\nconsole.log(wordPattern(\"abba\", \"dog constructor constructor dog\")); // Output: true\n",
	"explanation": "1. Input Parameters:\n   - `pattern`: A string where each character represents a pattern to match.\n   - `s`: A string where words are expected to correspond to characters in `pattern`.\n\n2. Splitting the Input String:\n   - `s.split(' ')` splits the string `s` into an array of words using spaces as separators.\n\n3. Quick Length Check:\n   - If the length of the `pattern` does not match the number of words in `s`, we return `false` immediately, as no one-to-one mapping can exist.\n\n4. Maps for Mappings:\n   - `charToWordMap`: A map that tracks the mapping of characters from `pattern` to words.\n   - `wordToCharMap`: A map that tracks the reverse mapping, ensuring no word is assigned to more than one character.\n\n5. Iteration over the Pattern:\n   - The function iterates through each character in `pattern` and its corresponding word in `words`:\n     - If the character is already mapped to a different word, it returns `false`.\n     - If the word is already mapped to a different character, it also returns `false`.\n\n6. Returning the Result:\n   - If no conflicts are found after checking all the mappings, the function returns `true`, indicating a consistent one-to-one mapping exists between the pattern and the words.\n\n7. Example Outputs:\n   - `\"abba\", \"dog cat cat dog\"` → `true`: The mapping is consistent (a → dog, b → cat).\n   - `\"abba\", \"dog cat cat fish\"` → `false`: The word \"fish\" doesn't match the expected \"dog\" for the first \"a\".\n   - `\"aaaa\", \"dog cat cat dog\"` → `false`: The word \"cat\" can't map to multiple characters.",
	"category": "Hashmap"
}
