{
	"id": 48,
	"topic": "Summary Ranges",
	"code": "// Find summary ranges\nvar summaryRanges = function(nums) {\n    // Edge case: If the input array is empty, return an empty array.\n    if (nums.length === 0) return [];\n\n    let result = []; // Array to store the resulting ranges.\n    let start = nums[0]; // Starting number of the current range.\n\n    // Log initial values.\n    console.log(\"Initial nums array:\", nums);\n\n    // Iterate through the array starting from the second element.\n    for (let i = 1; i <= nums.length; i++) {\n        // Log the current iteration details.\n        console.log(`Iteration ${i}: Current number = ${nums[i-1]}, Start = ${start}`);\n\n        // Check if we are at the end of the array or if the current number is not consecutive.\n        if (i === nums.length || nums[i] !== nums[i - 1] + 1) {\n            // Log range detection.\n            console.log(`Range detected from ${start} to ${nums[i - 1]}`);\n\n            // Determine the range and add it to the result.\n            if (start === nums[i - 1]) {\n                result.push(`${start}`); // Single number range.\n                console.log(`Added single number: ${start}`);\n            } else {\n                result.push(`${start}->${nums[i - 1]}`); // Continuous range.\n                console.log(`Added range: ${start}->${nums[i - 1]}`);\n            }\n\n            // Update `start` for the next range.\n            if (i < nums.length) start = nums[i];\n            console.log(`Updated start for next range: ${start}`);\n        }\n    }\n    console.log(\"Final result:\", result);\n\n    return result;\n};\n",
	"explanation": "Explanation:\n1. Initialization:\n   - We set `start` to the first element of the `nums` array, marking the beginning of the first range.\n\n2. Loop through the Array:\n   - We iterate through the `nums` array starting from the second element.\n   - In each iteration:\n     - We check if the current number is consecutive to the previous one. If not, this indicates the end of the current range.\n     - We construct the range and add it to the `result` array in the appropriate format:\n       - If `start` equals `nums[i - 1]`, we add the single number range `start`.\n       - Otherwise, we add the continuous range in the format `start->nums[i - 1]`.\n     - We update `start` to `nums[i]` if `i < nums.length` to prepare for the next range.\n\n3. Edge Case Handling:\n   - If the array is empty, we return an empty array.\n\nExample Walkthrough:\n- For input `nums = [0,1,2,4,5,7]`:\n  - We start with `start = 0` and form the range \"0->2\".\n  - Next, `4, 5` form the range \"4->5\".\n  - Finally, `7` is a single number, so we add \"7\" to the result.\n  - The resulting array is [\"0->2\", \"4->5\", \"7\"].\n\n- For input `nums = [0,2,3,4,6,8,9]`:\n  - The first number is `0`, so the range is \"0\".\n  - `2, 3, 4` form the range \"2->4\".\n  - `6` is a single number, so we add \"6\" to the result.\n  - `8, 9` form the range \"8->9\".\n  - The resulting array is [\"0\", \"2->4\", \"6\", \"8->9\"].\n\nTime and Space Complexity:\n- Time Complexity: O(n), where `n` is the number of elements in `nums`. We iterate through the array once.\n- Space Complexity: O(k), where `k` is the number of ranges in the result array. In the worst case, this is O(n) if there are no consecutive numbers.",
	"category": "Intervals"
}
